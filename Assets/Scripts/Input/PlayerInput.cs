//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Settings/InputActionAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Input
{
    public partial class @PlayerInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionAsset"",
    ""maps"": [
        {
            ""name"": ""GameActionMap"",
            ""id"": ""862e1a58-0b03-4dc1-b41b-8fe153a038a5"",
            ""actions"": [
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""fc8e3eda-e840-4b6b-b58b-b61a895f2e63"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""c6d42af0-3756-4693-b59d-7d36a58fe7d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""9dccd6f1-89da-4541-bbef-ca1f47b26c41"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""fbe2d58f-1f6d-43ba-a1f7-39c8140b31f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateForward"",
                    ""type"": ""Button"",
                    ""id"": ""0e8dce1e-05da-499f-83e9-558c6b54394c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateBack"",
                    ""type"": ""Button"",
                    ""id"": ""0fab26b4-8fd4-41a9-bfd1-6502df952d87"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fed103e5-64a6-4d80-9241-59a22342cc2a"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c887546-33e9-4207-a5d7-921133bb385a"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a52e2e1-1378-4fd5-b2d0-4f04e0b96363"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""443d80d5-4d3d-4b09-96d5-506a45ac424b"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e4c84b7-ed98-46f8-879b-4fd9c7834507"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56a07edd-78b6-4ab1-9f1b-4a05a0928316"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5556de69-922c-416d-849d-9ebf580d9ed2"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f936e851-95fe-46c7-a808-245aacc5f229"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53be073b-1c9d-4993-8e01-9ce5bb760487"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4440cd7e-e867-406d-96c2-2482ea5e8200"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateForward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3718deba-9c71-4813-ba29-f8c283cd1802"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bd01faf3-53b9-4b2f-bb57-a8e3188fec77"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // GameActionMap
            m_GameActionMap = asset.FindActionMap("GameActionMap", throwIfNotFound: true);
            m_GameActionMap_MoveLeft = m_GameActionMap.FindAction("MoveLeft", throwIfNotFound: true);
            m_GameActionMap_MoveRight = m_GameActionMap.FindAction("MoveRight", throwIfNotFound: true);
            m_GameActionMap_MoveUp = m_GameActionMap.FindAction("MoveUp", throwIfNotFound: true);
            m_GameActionMap_MoveDown = m_GameActionMap.FindAction("MoveDown", throwIfNotFound: true);
            m_GameActionMap_RotateForward = m_GameActionMap.FindAction("RotateForward", throwIfNotFound: true);
            m_GameActionMap_RotateBack = m_GameActionMap.FindAction("RotateBack", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // GameActionMap
        private readonly InputActionMap m_GameActionMap;
        private List<IGameActionMapActions> m_GameActionMapActionsCallbackInterfaces = new List<IGameActionMapActions>();
        private readonly InputAction m_GameActionMap_MoveLeft;
        private readonly InputAction m_GameActionMap_MoveRight;
        private readonly InputAction m_GameActionMap_MoveUp;
        private readonly InputAction m_GameActionMap_MoveDown;
        private readonly InputAction m_GameActionMap_RotateForward;
        private readonly InputAction m_GameActionMap_RotateBack;
        public struct GameActionMapActions
        {
            private @PlayerInput m_Wrapper;
            public GameActionMapActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveLeft => m_Wrapper.m_GameActionMap_MoveLeft;
            public InputAction @MoveRight => m_Wrapper.m_GameActionMap_MoveRight;
            public InputAction @MoveUp => m_Wrapper.m_GameActionMap_MoveUp;
            public InputAction @MoveDown => m_Wrapper.m_GameActionMap_MoveDown;
            public InputAction @RotateForward => m_Wrapper.m_GameActionMap_RotateForward;
            public InputAction @RotateBack => m_Wrapper.m_GameActionMap_RotateBack;
            public InputActionMap Get() { return m_Wrapper.m_GameActionMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameActionMapActions set) { return set.Get(); }
            public void AddCallbacks(IGameActionMapActions instance)
            {
                if (instance == null || m_Wrapper.m_GameActionMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GameActionMapActionsCallbackInterfaces.Add(instance);
                @MoveLeft.started += instance.OnMoveLeft;
                @MoveLeft.performed += instance.OnMoveLeft;
                @MoveLeft.canceled += instance.OnMoveLeft;
                @MoveRight.started += instance.OnMoveRight;
                @MoveRight.performed += instance.OnMoveRight;
                @MoveRight.canceled += instance.OnMoveRight;
                @MoveUp.started += instance.OnMoveUp;
                @MoveUp.performed += instance.OnMoveUp;
                @MoveUp.canceled += instance.OnMoveUp;
                @MoveDown.started += instance.OnMoveDown;
                @MoveDown.performed += instance.OnMoveDown;
                @MoveDown.canceled += instance.OnMoveDown;
                @RotateForward.started += instance.OnRotateForward;
                @RotateForward.performed += instance.OnRotateForward;
                @RotateForward.canceled += instance.OnRotateForward;
                @RotateBack.started += instance.OnRotateBack;
                @RotateBack.performed += instance.OnRotateBack;
                @RotateBack.canceled += instance.OnRotateBack;
            }

            private void UnregisterCallbacks(IGameActionMapActions instance)
            {
                @MoveLeft.started -= instance.OnMoveLeft;
                @MoveLeft.performed -= instance.OnMoveLeft;
                @MoveLeft.canceled -= instance.OnMoveLeft;
                @MoveRight.started -= instance.OnMoveRight;
                @MoveRight.performed -= instance.OnMoveRight;
                @MoveRight.canceled -= instance.OnMoveRight;
                @MoveUp.started -= instance.OnMoveUp;
                @MoveUp.performed -= instance.OnMoveUp;
                @MoveUp.canceled -= instance.OnMoveUp;
                @MoveDown.started -= instance.OnMoveDown;
                @MoveDown.performed -= instance.OnMoveDown;
                @MoveDown.canceled -= instance.OnMoveDown;
                @RotateForward.started -= instance.OnRotateForward;
                @RotateForward.performed -= instance.OnRotateForward;
                @RotateForward.canceled -= instance.OnRotateForward;
                @RotateBack.started -= instance.OnRotateBack;
                @RotateBack.performed -= instance.OnRotateBack;
                @RotateBack.canceled -= instance.OnRotateBack;
            }

            public void RemoveCallbacks(IGameActionMapActions instance)
            {
                if (m_Wrapper.m_GameActionMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGameActionMapActions instance)
            {
                foreach (var item in m_Wrapper.m_GameActionMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GameActionMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GameActionMapActions @GameActionMap => new GameActionMapActions(this);
        public interface IGameActionMapActions
        {
            void OnMoveLeft(InputAction.CallbackContext context);
            void OnMoveRight(InputAction.CallbackContext context);
            void OnMoveUp(InputAction.CallbackContext context);
            void OnMoveDown(InputAction.CallbackContext context);
            void OnRotateForward(InputAction.CallbackContext context);
            void OnRotateBack(InputAction.CallbackContext context);
        }
    }
}
